name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Instalar PHP para Composer
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, gd, pdo_pgsql

    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    # Instalar Node y compilar assets
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Build assets
      run: |
        npm ci
        npm run build

    # Subir artefacto de build (opcional para debugging en GitHub)
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: public/build

    # Configurar SSH
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    # Sincronizar proyecto al servidor (incluyendo vendor y build listos)
    - name: Rsync project to server
      run: |
        rsync -az --delete \
          --exclude=".git" \
          --exclude="node_modules" \
          --exclude=".github" \
          ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/softgenix/htdocs/www.softgenix.space

    # Desplegar vía SSH
    - name: Deploy via SSH
      run: |
        ssh -T -i ~/.ssh/id_ed25519 ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          cd /home/softgenix/htdocs/www.softgenix.space
          
          echo "=== Starting Deployment ==="
          
          # Copiar .env al directorio (si no existe)
          if [ ! -f .env ]; then
            cp .env.example .env
          fi
          
          # Levantar contenedores
          docker-compose down
          docker-compose up -d --build
          
          # Esperar que los contenedores estén listos
          sleep 30
          
          # Obtener container backend
          CONTAINER_ID=$(docker-compose ps -q backend)
          if [ -z "$CONTAINER_ID" ]; then
            echo "ERROR: Backend container not found!"
            docker-compose ps
            exit 1
          fi
          
          echo "Using container: $CONTAINER_ID"
          
          # Generar clave de aplicación si no existe
          docker exec $CONTAINER_ID bash -c "
            if [ -z \"\$(grep '^APP_KEY=base64:' .env)\" ]; then
              php artisan key:generate
            fi
          "
          
          # Solo comandos de Laravel
          docker exec $CONTAINER_ID bash -c "
            php artisan config:clear
            php artisan cache:clear
            php artisan migrate --force
            php artisan tenants:migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            chown -R www-data:www-data storage bootstrap/cache
            chmod -R 775 storage bootstrap/cache
          "
          
          echo "✅ Deployment completed!"
        EOF
